// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TypeRoleUser {
  SUPERADMIN
}

enum TypeOrientation {
  DATA_MANUSIA
  DATA_TEKNOLOGI
  IDE_MANUSIA
  IDE_TEKNOLOGI
  MANUSIA_TEKNOLOGI
}

model User {
  id       String       @id @default(uuid())
  name     String
  username String       @unique
  password String
  role     TypeRoleUser @default(SUPERADMIN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // index
  @@index([id, username])
}

model Participant {
  id          String          @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  schoolName  String
  class       String
  orientation TypeOrientation
  codeSds     String?
  codeSds1    String?
  codeSds2    String?

  mbti                             String?
  mbtiNaration                     String?                            @db.Text
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  participantOnFieldWork           ParticipantOnFieldWork[]
  participantOnProfessionQuestion  ParticipantOnProfessionQuestion[]
  participantOnPersonalityQuestion ParticipantOnPersonalityQuestion[]

  @@index([id, email])
}

model Major {
  id     String  @id @default(uuid())
  name   String
  degree String
  code   String  @unique
  url    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldWork {
  id   String @id @default(uuid())
  name String

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  participantOnFieldWork ParticipantOnFieldWork[]
}

model ParticipantOnFieldWork {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int

  idParticipant String
  participant   Participant @relation(fields: [idParticipant], references: [id], onDelete: Cascade)
  idFieldWork   String
  fieldWork     FieldWork   @relation(fields: [idFieldWork], references: [id], onDelete: Cascade)

  @@id([idParticipant, idFieldWork])
}

model ProfessionQuestion {
  id          String  @id @default(uuid())
  question    String
  profession1 String
  code1       String
  image1      String?

  profession2 String
  code2       String
  image2      String?

  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  participantOnProfessionQuestion ParticipantOnProfessionQuestion[]
}

model ParticipantOnProfessionQuestion {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nameProfession       String
  codeProfession       String
  timeTrack            Int
  idParticipant        String
  participant          Participant        @relation(fields: [idParticipant], references: [id], onDelete: Cascade)
  idProfessionQuestion String
  profession           ProfessionQuestion @relation(fields: [idProfessionQuestion], references: [id], onDelete: Cascade)

  @@id([idParticipant, idProfessionQuestion])
}

model PersonalityQuestion {
  id        String  @id @default(uuid())
  question  String
  groupCode String
  opsi1     String
  opsi2     String
  code1     String
  code2     String
  image1    String?
  image2    String?
  index     Int?

  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  participantOnPersonalityQuestion ParticipantOnPersonalityQuestion[]
}

model ParticipantOnPersonalityQuestion {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  opsi              String
  code              String
  groupCodeQuestion String

  idParticipant         String
  participant           Participant         @relation(fields: [idParticipant], references: [id], onDelete: Cascade)
  idPersonalityQuestion String
  personality           PersonalityQuestion @relation(fields: [idPersonalityQuestion], references: [id], onDelete: Cascade)

  @@id([idParticipant, idPersonalityQuestion])
}

model Mbti {
  id        String   @id @default(uuid())
  codeMbti  String   @unique
  naration  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
